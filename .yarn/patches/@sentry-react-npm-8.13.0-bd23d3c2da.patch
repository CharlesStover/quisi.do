diff --git a/build/types/reactrouter.d.ts b/build/types/reactrouter.d.ts
index be2d1cc5085ed7562aae0bf119633bb2cb3d4df0..ced4f4b27d3a5f72cd70494b29768a80fff31e28 100644
--- a/build/types/reactrouter.d.ts
+++ b/build/types/reactrouter.d.ts
@@ -1,5 +1,6 @@
 import { browserTracingIntegration } from '@sentry/browser';
 import type { Integration } from '@sentry/types';
+import type { ReactElement } from 'react';
 import * as React from 'react';
 import type { Action, Location } from './types';
 type Match = {
@@ -16,7 +17,7 @@ export type RouteConfig = {
     [propName: string]: unknown;
     path?: string | string[];
     exact?: boolean;
-    component?: JSX.Element;
+    component?: ReactElement;
     routes?: RouteConfig[];
 };
 export type MatchPath = (pathname: string, props: string | string[] | any, parent?: Match | null) => Match | null;
@@ -36,5 +37,5 @@ export declare function reactRouterV4BrowserTracingIntegration(options: Paramete
  */
 export declare function reactRouterV5BrowserTracingIntegration(options: Parameters<typeof browserTracingIntegration>[0] & ReactRouterOptions): Integration;
 export declare function withSentryRouting<P extends Record<string, any>, R extends React.ComponentType<P>>(Route: R): R;
-export {};
+export { };
 //# sourceMappingURL=reactrouter.d.ts.map
\ No newline at end of file
diff --git a/build/types/types.d.ts b/build/types/types.d.ts
index df1170b124e4f2bbf560ae4cd1b44948801c770e..243a31f1e05dc03c72b1284f56787b4b4e97c070 100644
--- a/build/types/types.d.ts
+++ b/build/types/types.d.ts
@@ -1,4 +1,5 @@
 /// <reference types="react" />
+import type { ReactElement } from 'react';
 export type Action = 'PUSH' | 'REPLACE' | 'POP';
 export type Location = {
     pathname: string;
@@ -48,7 +49,7 @@ export type UseLocation = () => Location;
 export type UseNavigationType = () => Action;
 export type RouteObjectArrayAlias = any;
 export type RouteMatchAlias = any;
-export type CreateRoutesFromChildren = (children: JSX.Element[]) => RouteObjectArrayAlias;
+export type CreateRoutesFromChildren = (children: ReactElement[]) => RouteObjectArrayAlias;
 export type MatchRoutes = (routes: RouteObjectArrayAlias, location: Location, basename?: string) => RouteMatchAlias[] | null;
 export type ShouldRevalidateFunction = (args: any) => boolean;
 interface DataFunctionArgs {
@@ -157,5 +158,5 @@ export interface Router<TState extends RouterState = RouterState> {
     subscribe(fn: RouterSubscriber<TState>): () => void;
 }
 export type CreateRouterFunction<TState extends RouterState = RouterState, TRouter extends Router<TState> = Router<TState>> = (routes: RouteObject[], opts?: any) => TRouter;
-export {};
+export { };
 //# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/build/types-ts3.8/reactrouter.d.ts b/build/types-ts3.8/reactrouter.d.ts
index f4e04c7c27f329555cbe5f09b77942f0fe1fa4f4..6068ff13cc87b66233c4937fd99abd167697a59a 100644
--- a/build/types-ts3.8/reactrouter.d.ts
+++ b/build/types-ts3.8/reactrouter.d.ts
@@ -1,5 +1,6 @@
 import { browserTracingIntegration } from '@sentry/browser';
 import { Integration } from '@sentry/types';
+import type { ReactElement } from 'react';
 import * as React from 'react';
 import { Action, Location } from './types';
 type Match = {
@@ -16,7 +17,7 @@ export type RouteConfig = {
     [propName: string]: unknown;
     path?: string | string[];
     exact?: boolean;
-    component?: JSX.Element;
+    component?: ReactElement;
     routes?: RouteConfig[];
 };
 export type MatchPath = (pathname: string, props: string | string[] | any, parent?: Match | null) => Match | null;
@@ -36,5 +37,5 @@ export declare function reactRouterV4BrowserTracingIntegration(options: Paramete
  */
 export declare function reactRouterV5BrowserTracingIntegration(options: Parameters<typeof browserTracingIntegration>[0] & ReactRouterOptions): Integration;
 export declare function withSentryRouting<P extends Record<string, any>, R extends React.ComponentType<P>>(Route: R): R;
-export {};
+export { };
 //# sourceMappingURL=reactrouter.d.ts.map
diff --git a/build/types-ts3.8/types.d.ts b/build/types-ts3.8/types.d.ts
index ef7b2dbbab2a3d8569018991e1224d3842ad6c5a..428dfe39fa7fe20d22e76c0006be8f3a0e64267d 100644
--- a/build/types-ts3.8/types.d.ts
+++ b/build/types-ts3.8/types.d.ts
@@ -1,4 +1,5 @@
 /// <reference types="react" />
+import type { ReactElement } from 'react';
 export type Action = 'PUSH' | 'REPLACE' | 'POP';
 export type Location = {
     pathname: string;
@@ -48,7 +49,7 @@ export type UseLocation = () => Location;
 export type UseNavigationType = () => Action;
 export type RouteObjectArrayAlias = any;
 export type RouteMatchAlias = any;
-export type CreateRoutesFromChildren = (children: JSX.Element[]) => RouteObjectArrayAlias;
+export type CreateRoutesFromChildren = (children: ReactElement[]) => RouteObjectArrayAlias;
 export type MatchRoutes = (routes: RouteObjectArrayAlias, location: Location, basename?: string) => RouteMatchAlias[] | null;
 export type ShouldRevalidateFunction = (args: any) => boolean;
 interface DataFunctionArgs {
@@ -157,5 +158,5 @@ export interface Router<TState extends RouterState = RouterState> {
     subscribe(fn: RouterSubscriber<TState>): () => void;
 }
 export type CreateRouterFunction<TState extends RouterState = RouterState, TRouter extends Router<TState> = Router<TState>> = (routes: RouteObject[], opts?: any) => TRouter;
-export {};
+export { };
 //# sourceMappingURL=types.d.ts.map
