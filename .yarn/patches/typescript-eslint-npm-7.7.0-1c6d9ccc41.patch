diff --git a/dist/index.d.ts b/dist/index.d.ts
index 80759b35992c79d624cf5d7471aae005948aab61..6fc39dde152c5b42a578ac55f14680dd53758c58 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,41 +1,41 @@
-import type { TSESLint } from '@typescript-eslint/utils';
+import { ESLint, Linter } from 'eslint';
 import type { ConfigWithExtends } from './config-helper';
 import { config } from './config-helper';
-declare const parser: TSESLint.FlatConfig.Parser;
-declare const plugin: TSESLint.FlatConfig.Plugin;
+declare const parser: Linter.ParserModule;
+declare const plugin: ESLint.Plugin;
 declare const configs: {
-    all: TSESLint.FlatConfig.ConfigArray;
-    base: TSESLint.FlatConfig.Config;
-    disableTypeChecked: TSESLint.FlatConfig.Config;
-    eslintRecommended: TSESLint.FlatConfig.Config;
-    recommended: TSESLint.FlatConfig.ConfigArray;
-    recommendedTypeChecked: TSESLint.FlatConfig.ConfigArray;
-    recommendedTypeCheckedOnly: TSESLint.FlatConfig.ConfigArray;
-    strict: TSESLint.FlatConfig.ConfigArray;
-    strictTypeChecked: TSESLint.FlatConfig.ConfigArray;
-    strictTypeCheckedOnly: TSESLint.FlatConfig.ConfigArray;
-    stylistic: TSESLint.FlatConfig.ConfigArray;
-    stylisticTypeChecked: TSESLint.FlatConfig.ConfigArray;
-    stylisticTypeCheckedOnly: TSESLint.FlatConfig.ConfigArray;
+    all: Linter.FlatConfig[];
+    base: Linter.FlatConfig;
+    disableTypeChecked: Linter.FlatConfig;
+    eslintRecommended: Linter.FlatConfig;
+    recommended: Linter.FlatConfig[];
+    recommendedTypeChecked: Linter.FlatConfig[];
+    recommendedTypeCheckedOnly: Linter.FlatConfig[];
+    strict: Linter.FlatConfig[];
+    strictTypeChecked: Linter.FlatConfig[];
+    strictTypeCheckedOnly: Linter.FlatConfig[];
+    stylistic: Linter.FlatConfig[];
+    stylisticTypeChecked: Linter.FlatConfig[];
+    stylisticTypeCheckedOnly: Linter.FlatConfig[];
 };
-export type Config = TSESLint.FlatConfig.ConfigFile;
+export type Config = Linter.FlatConfig;
 export type { ConfigWithExtends };
 declare const _default: {
     config: typeof config;
     configs: {
-        all: TSESLint.FlatConfig.ConfigArray;
-        base: TSESLint.FlatConfig.Config;
-        disableTypeChecked: TSESLint.FlatConfig.Config;
-        eslintRecommended: TSESLint.FlatConfig.Config;
-        recommended: TSESLint.FlatConfig.ConfigArray;
-        recommendedTypeChecked: TSESLint.FlatConfig.ConfigArray;
-        recommendedTypeCheckedOnly: TSESLint.FlatConfig.ConfigArray;
-        strict: TSESLint.FlatConfig.ConfigArray;
-        strictTypeChecked: TSESLint.FlatConfig.ConfigArray;
-        strictTypeCheckedOnly: TSESLint.FlatConfig.ConfigArray;
-        stylistic: TSESLint.FlatConfig.ConfigArray;
-        stylisticTypeChecked: TSESLint.FlatConfig.ConfigArray;
-        stylisticTypeCheckedOnly: TSESLint.FlatConfig.ConfigArray;
+        all: Linter.FlatConfig[];
+        base: Linter.FlatConfig;
+        disableTypeChecked: Linter.FlatConfig;
+        eslintRecommended: Linter.FlatConfig;
+        recommended: Linter.FlatConfig[];
+        recommendedTypeChecked: Linter.FlatConfig[];
+        recommendedTypeCheckedOnly: Linter.FlatConfig[];
+        strict: Linter.FlatConfig[];
+        strictTypeChecked: Linter.FlatConfig[];
+        strictTypeCheckedOnly: Linter.FlatConfig[];
+        stylistic: Linter.FlatConfig[];
+        stylisticTypeChecked: Linter.FlatConfig[];
+        stylisticTypeCheckedOnly: Linter.FlatConfig[];
     };
     parser: {
         meta?: {
@@ -49,7 +49,7 @@ declare const _default: {
             visitorKeys?: unknown;
         };
     };
-    plugin: TSESLint.FlatConfig.Plugin;
+    plugin: ESLint.Plugin;
 };
 export default _default;
 export { config, configs, parser, plugin };
