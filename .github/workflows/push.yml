name: Push

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn

  eslint:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn
      - name: ESLint
        run: yarn eslint

  jest:
    needs: install
    runs-on: ubuntu-latest
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn
      - name: Jest
        run: yarn jest
        env:
          DD_ENV: ci

  set-version:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn
      - name: Set version
        run: |
          mkdir ~/version/
          echo $(yarn get-version) > ~/version/index.txt
      - name: Upload version
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: '~/version/'

  build:
    needs: set-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn
      - name: Download version
        uses: actions/download-artifact@v2
        with:
          name: version
          path: '~/version/'
      - name: Set version
        run: |
          echo "REACT_APP_VERSION=$(cat ~/version/index.txt)" >> $GITHUB_ENV
      - name: Build
        run: yarn build
        env:
          # Ignore warnings from `mini-css-extract-plugin`.
          CI: false
          REACT_APP_GITHUB_REPOSITORY: ${{ github.repository }}
          REACT_APP_GITHUB_SHA: ${{ github.sha }}
      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: error
          name: build
          path: build

  cypress:
    needs: set-version
    runs-on: ${{ matrix.os || 'ubuntu' }}-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn
      - name: Download version
        uses: actions/download-artifact@v2
        with:
          name: version
          path: '~/version/'
      - name: Set version
        run: |
          echo "REACT_APP_VERSION=$(cat ~/version/index.txt)" >> $GITHUB_ENV
      - name: Cypress
        uses: cypress-io/github-action@v2
        env:
          CHOKIDAR_USEPOLLING: true
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REACT_APP_GITHUB_REPOSITORY: ${{ github.repository }}
          REACT_APP_GITHUB_SHA: ${{ github.sha }}
        with:
          command: yarn cypress
          browser: ${{ matrix.browser }}
          group: ${{ matrix.os }}-${{ matrix.browser }}
          record: true
          start: yarn start
          tag: ${{ github.event_name }}
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
    strategy:
      fail-fast: false
      matrix:
        browser: [edge, firefox, chrome]
        include:
          - browser: edge
            os: windows

  github-pages:
    needs: [build, cypress, eslint, jest]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: gh-pages
          clean: true
          folder: build
          single-commit: true

  sentry-release:
    needs: [build, cypress, eslint, jest]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build
      - name: Download version
        uses: actions/download-artifact@v2
        with:
          name: version
          path: '~/version/'
      - name: Set version
        run: |
          echo "SENTRY_VERSION=$(cat ~/version/index.txt)" >> $GITHUB_ENV
      - name: Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_LOG_LEVEL: info
          SENTRY_ORG: charles-stover
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          sourcemaps: build
          version: ${{ env.SENTRY_VERSION }}

  cloudflare-purge:
    needs: github-pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn
      - name: Verify Cloudflare API token
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: >
          curl \
            --header "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            --header "Content-Type:application/json" \
            --request GET \
            --silent \
            "https://api.cloudflare.com/client/v4/user/tokens/verify" \
          | yarn verify-cloudflare-api-token
      - name: Purge Cloudflare files
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: >
          curl \
            --data '{
              "files": [
                "https://charlesstover.com",
                "https://charlesstover.com/index.html"
              ]
            }' \
            --header "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            --header "Content-Type:application/json" \
            --request POST \
            "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache"

  datadog-synthetics:
    needs: cloudflare-purge
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn
      - name: Run Synthetics tests
        run: >
          yarn datadog-synthetics \
            --apiKey "$DD_API_KEY" \
            --appKey "$DD_APP_KEY" \
            --files "/src/features/**/*.synthetics.json"
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_APP_KEY: charlesstover.com

on:
  push:
    branches: [main]
