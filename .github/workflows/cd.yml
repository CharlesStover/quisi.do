name: CI/CD

jobs:
  # Stage 1: install
  install:
    name: Install
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable

  # Stage 2: prepack, prepublish-only
  prepack:
    name: Prepack
    needs: install
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Prepack
        run: yarn run prepack
        env:
          CI: false
          REACT_APP_GITHUB_REPOSITORY: ${{ github.repository }}
          REACT_APP_GITHUB_SHA: ${{ github.sha }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: prepack
          path: |
            packages/*/build/
            packages/*/dist/

  # Run tests against the root directory.
  prepublish-only:
    name: Prepublish only
    needs: install
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Prepublish only
        run: yarn run prepublishOnly

  # Stage 3: cypress, lighthouse, npm, opensource-registry,
  #          prepublish-applications
  cypress:
    name: Cypress
    needs: prepack
    runs-on: ${{ matrix.os }}-latest
    ## Container operations are only supported on Linux runners.
    # env:
    #   DD_ENV: ci
    # services:
    #   datadog-agent:
    #     image: datadog/agent:latest
    #     env:
    #       DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
    #       DD_HOSTNAME: none
    #       DD_INSIDE_CI: true
    #     ports:
    #       - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: prepack
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Enable Plug-n-Play
        run: yarn cypress:pnp
        working-directory: packages/charlesstover.com
      - name: End-to-end test
        uses: cypress-io/github-action@v4
        env:
          CHOKIDAR_USEPOLLING: true
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_SCREENSHOTS_SUBFOLDER: ${{ matrix.os }}-${{ matrix.browser }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NYC_REPORT_DIR: cypress/coverage/${{ matrix.os }}-${{ matrix.browser }} # -${{ matrix.container }}
          REACT_APP_GITHUB_REPOSITORY: ${{ github.repository }}
          REACT_APP_GITHUB_SHA: ${{ github.sha }}
        with:
          browser: ${{ matrix.browser }}
          ci-build-id: ${{ matrix.os }}-${{ github.run_id }}-${{ github.run_attempt }}
          command-prefix: yarn dlx
          config-file: cypress.config.cjs
          group: ${{ matrix.browser }}
          install: false
          parallel: true
          record: true
          start: yarn run cypress:start
          tag: ${{ github.event_name }}
          wait-on: 'http://localhost:3000/'
          wait-on-timeout: 120
          working-directory: packages/charlesstover.com/
      - name: Upload artifacts
        if: matrix.os == 'ubuntu'
        uses: actions/upload-artifact@v3
        with:
          name: cypress
          path: |
            packages/*/cypress/coverage/
            packages/*/cypress/screenshots/
            packages/*/cypress/videos/
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows]
        browser: [chrome, edge] # firefox
        # Cypress only supports 1 container for Edge.
        # With multiple containers, Cypress will use the wrong browser version.
        # https://github.com/cypress-io/github-action/issues/121
        # container: [1, 2, 3]
        exclude:
          - browser: edge
            os: ubuntu

  lighthouse:
    name: Lighthouse
    needs: prepack
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: prepack
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Audit
        run: yarn run lighthouse
        working-directory: packages/charlesstover.com
      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse
          path: |
            packages/*/lighthouse.report.html
            packages/*/lighthouse.report.json

  npm:
    name: NPM
    needs: [prepack, prepublish-only]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: prepack
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: >
          yarn config set npmAuthToken $NPM_AUTH_TOKEN;
          yarn run publish;
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: npm
          path: packages/*/jest/

  opensource-registry:
    name: OpenSource registry
    needs: [prepack, prepublish-only]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: prepack
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
          registry-url: 'https://npm-publish.opensourceregistry.com'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.OPENSOURCE_REGISTRY_NPM_TOKEN }}
        run: >
          yarn config set npmAuthToken $NPM_AUTH_TOKEN;
          yarn run publish;

  # Run the prepublish test on applications, because prepublish won't be
  #   triggered for applications by the publish step.
  prepublish-applications:
    name: Prepublish applications
    needs: prepack
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: prepack
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Prepublish
        run: yarn packages/charlesstover.com run prepublish
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: prepublish-applications
          path: packages/*/jest/

  # Stage 4: coverage, github-packages
  coverage:
    name: Coverage
    needs: [cypress, prepublish-applications]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download Cypress artifacts
        uses: actions/download-artifact@v3
        with:
          name: cypress
          path: packages/
      - name: Download prepublish artifacts
        uses: actions/download-artifact@v3
        with:
          name: prepublish-applications
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Report coverage
        run: yarn packages/charlesstover.com run coverage
        env:
          BRANCHES_COVERAGE_THRESHOLD: 1
          FUNCTIONS_COVERAGE_THRESHOLD: 1
          LINES_COVERAGE_THRESHOLD: 1
          STATEMENTS_COVERAGE_THRESHOLD: 1
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: |
            packages/*/.nyc_output/
            packages/*/coverage/

  github-packages:
    name: GitHub Packages
    needs: npm
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    permissions:
      contents: read
      packages: write
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: prepack
          path: packages/
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          yarn config set npmAuthToken $NPM_AUTH_TOKEN;
          yarn config set \
            npmScopes.${{ github.repository_owner }}.npmPublishRegistry \
            'https://npm.pkg.github.com';
          yarn run publish;

  # Stage 5: github-pages, sentry-release, wrangler-deploy
  github-pages:
    name: GitHub Pages
    needs: [coverage, lighthouse]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: prepack
          path: packages/
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          clean: true
          folder: packages/charlesstover.com/build/
          single-commit: true

  sentry-release:
    name: Sentry release
    needs: [coverage, lighthouse]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: prepack
          path: packages/
      - name: Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_LOG_LEVEL: info
          SENTRY_ORG: charles-stover
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          sourcemaps: build
          version: ${{ github.sha }}

  wrangler-deploy:
    name: Wrangler deploy
    needs: [coverage, lighthouse]
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Deploy
        run: yarn packages/cloudflare-analytics-worker run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_EDIT_WORKERS_API_KEY }}

  # Stage 6: cloudflare-purge
  cloudflare-purge:
    name: Cloudflare purge
    needs: github-pages
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Purge Cloudflare files
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: >
          curl \
            --data '{
              "files": [
                "https://charlesstover.com",
                "https://charlesstover.com/index.html"
              ]
            }' \
            --header "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            --header "Content-Type:application/json" \
            --request POST \
            "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache"

  # Stage 7: neuralegion
  neuralegion:
    name: NeuraLegion
    needs: cloudflare-purge
    runs-on: ubuntu-latest
    env:
      DD_ENV: ci
    services:
      datadog-agent:
        image: datadog/agent:latest
        env:
          DD_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          DD_HOSTNAME: none
          DD_INSIDE_CI: true
        ports:
          - 8126:8126
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Scan
        continue-on-error: true
        # id: scan
        uses: NeuraLegion/run-scan@release
        with:
          api_token: ${{ secrets.NEURALEGION_TOKEN }}
          name: GitHub SHA - ${{ github.sha }}
          crawler_urls: |
            ["https://charlesstover.com/"]
          discovery_types: |
            ["crawler"]
      # - name: Wait for breakpoint
      #   continue-on-error: true
      #   uses: NeuraLegion/wait-for@release
      #   with:
      #     api_token: ${{ secrets.NEURALEGION_TOKEN }}
      #     code_scanning_alerts: true
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     scan: ${{ steps.scan.outputs.id }}
      #     timeout: 600
      #     wait_for: any

on:
  push:
    branches: [main]
  workflow_dispatch:
